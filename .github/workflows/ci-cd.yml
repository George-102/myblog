name: Java CI/CD with Maven and Docker

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        run: mvn -B clean package

      - name: Debug - Check project structure
        run: |
          echo "=== 详细文件结构检查 ==="
          echo "当前目录:"
          pwd
          echo "所有文件:"
          ls -la
          echo "src目录:"
          ls -la src/
          echo "target目录:"
          ls -la target/ || echo "target目录不存在"
          echo "尝试查找WAR文件:"
          find . -name "*.war" -type f || echo "没有找到WAR文件"
          echo "Maven打包结果:"
          mvn help:effective-pom | grep packaging || echo "无法获取打包类型"

      - name: Debug - Check Maven build output
        run: |
          echo "=== Maven构建详情 ==="
          # 再次运行Maven并显示详细输出
          mvn -X clean package | grep -A 10 -B 10 "packaging" || echo "无法获取详细构建信息"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          # 使用 --no-cache 确保重新拉取镜像
          docker build --no-cache -t my-blog:${{ github.sha }} .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image
        run: |
          docker tag my-blog:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/my-blog:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-blog:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            # 启动 MySQL（如果尚未启动）
            docker start mysql-server || docker run -d \
            --name mysql-server \
            --network blog-network \
            -p 3306:3306 \
            -v /opt/mysql/data:/var/lib/mysql \
            -e MYSQL_ROOT_PASSWORD=ady190719 \
            -e MYSQL_DATABASE=myblog \
            -e MYSQL_USER=bloguser \
            -e MYSQL_PASSWORD=ady190719 \
            -e MYSQL_CHARSET=utf8mb4 \
            -e MYSQL_COLLATION=utf8mb4_unicode_ci \
            mysql:8.0
            --character-set-server=utf8mb4 \
            --collation-server=utf8mb4_unicode_ci
            
            # 等待 MySQL 启动
            sleep 10
            
            # 停止并删除旧博客容器
            docker stop live-blog || true
            docker rm live-blog || true
            
            # 运行新博客容器，连接到本地 MySQL
            docker run -d \
              --name live-blog \
              --network blog-network \
              -p 8080:8080 \
              --link mysql-server:mysql \
              -e "JDBC_URL=jdbc:mysql://mysql-server:3306/myblog?useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=UTC" \
              -e "JDBC_USER=bloguser" \
              -e "JDBC_PASSWORD=ady190719" \
              ${{ secrets.DOCKERHUB_USERNAME }}/my-blog:latest
            
            echo "部署完成！"
            docker ps
            docker network inspect blog-network
            echo "MySQL 连接信息："
            echo "地址：mysql-server:3306"
            echo "数据库：myblog"
            echo "用户：bloguser"